name: Release Docker Image

on:
    # This workflow is triggered by dist when it creates a new release
    workflow_call:
      # dist exposes the plan from the plan step, as a JSON string,
      # to your job if it needs it
      inputs:
        plan:
          required: true
          type: string

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
        PLAN: ${{ inputs.plan }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - id: set-matrix
        run: |
            echo "matrix=$(echo $PLAN | jq -c --slurpfile images .github/workflows/images.json '[.releases[] | select(.app_name as $name | $name | IN($images[] | keys[])) | . + $images[][.app_name]]')" >> "$GITHUB_OUTPUT"
  build-and-push-images:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    needs: define-matrix
    strategy:
      matrix: 
        ${{ fromJSON(needs.define-matrix.outputs.matrix) }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          tags: |
            type=semver,pattern={{version}},value=${{ matrix.app_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ matrix.app_version }}
            type=semver,pattern={{major}},value=${{ matrix.app_version }}
          images: |
            ghcr.io/${{ matrix.hosting.github.owner }}/${{ matrix.image_name }}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      # It will not push images generated from a pull request
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true
          file: ${{ matrix.file }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)." 
      - name: Generate artifact attestation (ghcr.io)
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ matrix.hosting.github.owner }}/${{ matrix.image_name }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
